#!/usr/bin/env python3

# Copyright (c) Jerem√≠as Casteglione <jeremias@talkingpts.org>
# See LICENSE file.

import sys

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from os import system

import uwscli

def nq(app, version, tflags):
	cmd = "uwsnq /srv/deploy/Buildpack/build.py --target %s --version %s" % (app, version)
	if tflags != '':
		cmd += " -- %s" % tflags
	return system(cmd)

__doc__ = 'build meteor app release'

def main():
	flags = ArgumentParser(formatter_class = RawDescriptionHelpFormatter,
		description = __doc__, epilog = uwscli.app_description())
	flags.add_argument('--no-test', action = 'store_true', default = False,
		help = 'do not run app tests')
	flags.add_argument('app', metavar = 'app', choices = uwscli.app_list(),
		default = 'app', help = 'app name')
	flags.add_argument('version', metavar = 'X.Y.Z', help = 'app version/tag')

	args = flags.parse_args()

	tflags = ''
	if args.no_test:
		tflags = '--no-test'

	rc = nq(args.app, args.version, tflags)
	if rc != 0:
		print("enqueue of %s build job failed!" % args.app, file = sys.stderr)
		return rc

	print('')
	print('Check build job with:')
	print('  uwsq')
	print('')
	print('Deploy and check status with:')
	if args.app == 'app':
		print('')
		print("  Workers: worker-deploy %s" % args.version)
		print('           worker-status')
		print('')
		print("  Web: web-deploy (east|west) %s" % args.version)
		print('       web-status (east|west)')
	elif args.app == 'beta':
		print("  beta-deploy %s" % args.version)
		print('  beta-status')
	elif args.app == 'cs':
		print("  cs-deploy %s" % args.version)
		print('  cs-status')
	print('')
	print('Run uwshelp for more information.')

	return 0

if __name__ == '__main__':
	sys.stdout.reconfigure(line_buffering = False)
	sys.stderr.reconfigure(line_buffering = False)
	sys.exit(main())
