#!/usr/bin/env python3

import sys

from argparse import ArgumentParser
from os import system

def nq(target, version, tflags):
	cmd = "uwsnq /srv/deploy/Buildpack/build.py --target %s %s" % (target, version)
	if tflags != '':
		cmd += " -- %s" % tflags
	return system(cmd)

__doc__ = 'build meteor app release'

def main():
	flags = ArgumentParser(description = __doc__)
	flags.add_argument('--app', action = 'store_true', default = True,
		help = 'build App (default)')
	flags.add_argument('--beta', action = 'store_true', default = False,
		help = 'build App beta')
	flags.add_argument('--cs', action = 'store_true', default = False,
		help = 'build Crowdsourcing')
	flags.add_argument('--no-test', action = 'store_true', default = False,
		help = 'do not run app tests')
	flags.add_argument('version', metavar = 'X.Y.Z', help = 'app version/tag')

	args = flags.parse_args()

	target = 'app'
	if args.beta:
		target = 'beta'
	elif args.cs:
		target = 'crowdsourcing'

	tflags = ''
	if args.no_test:
		tflags = '--no-test'

	rc = nq(target, args.version, tflags)
	if rc != 0:
		print("enqueue of %s build job failed!" % target, file = sys.stderr)
		return rc

	print('')
	print('Check build job with:')
	print('  uwsq')
	print('')
	print('Deploy and check status with:')
	if target == 'app':
		print('')
		print("  Workers: worker-deploy %s" % args.version)
		print('           worker-status')
		print('')
		print("  Web: web-deploy (east|west) %s" % args.version)
		print('       web-status (east|west)')
	elif target == 'beta':
		print("  beta-deploy %s" % args.version)
		print('  beta-status')
	elif target == 'crowdsourcing':
		print("  cs-deploy %s" % args.version)
		print('  cs-status')
	print('')
	print('Run uwshelp for more information.')

	return 0

if __name__ == '__main__':
	sys.stdout.reconfigure(line_buffering = False)
	sys.stderr.reconfigure(line_buffering = False)
	sys.exit(main())
