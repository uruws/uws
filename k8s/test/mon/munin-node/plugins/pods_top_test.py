#!/usr/bin/env python3

# Copyright (c) Jerem√≠as Casteglione <jeremias@talkingpts.org>
# See LICENSE file.

import unittest
from unittest.mock import MagicMock, call

import mon_t

import pods_top

_bup_print = pods_top._print

_pods = {
	'items': [
		{
			'namespace': 'cert-manager',
			'name': 'cert-manager-66b6d6bf59-xsx76',
			'cpu': 1,
			'mem': 24
		},
		{
			'namespace': 'cert-manager',
			'name': 'cert-manager-cainjector-856d4df858-csjg7',
			'cpu': 3,
			'mem': 52
		},
		{
			'namespace': 'ingress-nginx',
			'name': 'ingress-nginx-controller-59c8576d75-qbms9',
			'cpu': 3,
			'mem': 76
		},
		{
			'namespace': 'kube-system',
			'name': 'aws-node-5lmld',
			'cpu': 4,
			'mem': 41
		},
		{
			'namespace': 'kube-system',
			'name': 'cluster-autoscaler-848d4b88dc-rlvx6',
			'cpu': 2,
			'mem': 41
		},
		{
			'namespace': 'kube-system',
			'name': 'coredns-7d74b564bd-9mc2d',
			'cpu': 5,
			'mem': 8
		},
		{
			'namespace': 'kube-system',
			'name': 'kube-proxy-6zggk',
			'cpu': 1,
			'mem': 14
		},
		{
			'namespace': 'kube-system',
			'name': 'metrics-server-588cd8ddb5-r6hrq',
			'cpu': 4,
			'mem': 20
		},
		{
			'namespace': 'mon',
			'name': 'k8s-6894c9b96c-kg7fq',
			'cpu': 1,
			'mem': 7
		},
		{
			'namespace': 'mon',
			'name': 'munin-0',
			'cpu': 4,
			'mem': 66
		},
		{
			'namespace': 'mon',
			'name': 'munin-node-7cdd78b4d-qtpgc',
			'cpu': 1,
			'mem': 12
		},
	]
}

_sts = {
	'cert-manager/cert-manager': {
		'count': 1,
		'cpu': 1,
		'cpu_max': 1,
		'cpu_min': 1,
		'mem': 24,
		'mem_max': 24,
		'mem_min': 24,
	},
	'cert-manager/cert-manager-cainjector': {
		'count': 1,
		'cpu': 3,
		'cpu_max': 3,
		'cpu_min': 3,
		'mem': 52,
		'mem_max': 52,
		'mem_min': 52,
	},
	'ingress-nginx/ingress-nginx-controller': {
		'count': 1,
		'cpu': 3,
		'cpu_max': 3,
		'cpu_min': 3,
		'mem': 76,
		'mem_max': 76,
		'mem_min': 76,
	},
	'kube-system/aws-node': {
		'count': 1,
		'cpu': 4,
		'cpu_max': 4,
		'cpu_min': 4,
		'mem': 41,
		'mem_max': 41,
		'mem_min': 41,
	},
	'kube-system/cluster-autoscaler': {
		'count': 1,
		'cpu': 2,
		'cpu_max': 2,
		'cpu_min': 2,
		'mem': 41,
		'mem_max': 41,
		'mem_min': 41,
	},
	'kube-system/coredns': {
		'count': 1,
		'cpu': 5,
		'cpu_max': 5,
		'cpu_min': 5,
		'mem': 8,
		'mem_max': 8,
		'mem_min': 8,
	},
	'kube-system/kube-proxy': {
		'count': 1,
		'cpu': 1,
		'cpu_max': 1,
		'cpu_min': 1,
		'mem': 14,
		'mem_max': 14,
		'mem_min': 14,
	},
	'kube-system/metrics-server': {
		'count': 1,
		'cpu': 4,
		'cpu_max': 4,
		'cpu_min': 4,
		'mem': 20,
		'mem_max': 20,
		'mem_min': 20,
	},
	'mon/k8s': {
		'count': 1,
		'cpu': 1,
		'cpu_max': 1,
		'cpu_min': 1,
		'mem': 7,
		'mem_max': 7,
		'mem_min': 7,
	},
	'mon/munin-0': {
		'count': 1,
		'cpu': 4,
		'cpu_max': 4,
		'cpu_min': 4,
		'mem': 66,
		'mem_max': 66,
		'mem_min': 66,
	},
	'mon/munin-node': {
		'count': 1,
		'cpu': 1,
		'cpu_max': 1,
		'cpu_min': 1,
		'mem': 12,
		'mem_max': 12,
		'mem_min': 12,
	},
}

class Test(unittest.TestCase):

	def setUp(t):
		mon_t.setUp()
		pods_top._print = MagicMock()

	def tearDown(t):
		mon_t.tearDown()
		pods_top._print = _bup_print

	def test_print(t):
		_bup_print('testing', '...')

	def test_podname(t):
		l = [pods_top._podname(i['name']) for i in _pods['items']]
		t.assertListEqual(sorted(l), [
			'aws-node',
			'cert-manager',
			'cert-manager-cainjector',
			'cluster-autoscaler',
			'coredns',
			'ingress-nginx-controller',
			'k8s',
			'kube-proxy',
			'metrics-server',
			'munin-0',
			'munin-node',
		])

	def test_podname_empty(t):
		t.assertIsNone(pods_top._podname(''))

	def test_podname_ebs_csi(t):
		t.assertEqual(pods_top._podname('ebs-csi-node-4rvf6'), 'ebs-csi-node')

	def test_podname_efs_csi(t):
		t.assertEqual(pods_top._podname('efs-csi-node-2crf8'), 'efs-csi-node')

	def test_podname_stateful_set(t):
		t.assertEqual(pods_top._podname('testing'), 'testing')

	def test_parse(t):
		t.assertDictEqual(pods_top.parse({}), {})

	def test_parse_data(t):
		t.maxDiff = None
		t.assertDictEqual(pods_top.parse(_pods), _sts)

	def test_parse_min(t):
		t.maxDiff = None
		pods = {
			'items': [
				{
					'namespace': 'cert-manager',
					'name': 'cert-manager-66b6d6bf59-xsx76',
					'cpu': 3,
					'mem': 24
				},
				{
					'namespace': 'cert-manager',
					'name': 'cert-manager-66b6d6bf59-xsx76',
					'cpu': 1,
					'mem': 12
				},
			],
		}
		t.assertDictEqual(pods_top.parse(pods), {
			'cert-manager/cert-manager': {
				'count': 2,
				'cpu': 4,
				'cpu_max': 3,
				'cpu_min': 1,
				'mem': 36,
				'mem_max': 24,
				'mem_min': 12,
			},
		})

	def test_config(t):
		pods_top.config(_sts)
		config = [
			call('multigraph pod_top_cpu'),
			call('graph_title k8stest pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('cert_manager_cert_manager.label cert-manager/cert-manager', '(1)'),
			call('cert_manager_cert_manager.colour COLOUR0'),
			call('cert_manager_cert_manager.draw AREASTACK'),
			call('cert_manager_cert_manager.min 0'),
			call('cert_manager_cert_manager_cainjector.label cert-manager/cert-manager-cainjector', '(1)'),
			call('cert_manager_cert_manager_cainjector.colour COLOUR1'),
			call('cert_manager_cert_manager_cainjector.draw AREASTACK'),
			call('cert_manager_cert_manager_cainjector.min 0'),
			call('ingress_nginx_ingress_nginx_controller.label ingress-nginx/ingress-nginx-controller', '(1)'),
			call('ingress_nginx_ingress_nginx_controller.colour COLOUR2'),
			call('ingress_nginx_ingress_nginx_controller.draw AREASTACK'),
			call('ingress_nginx_ingress_nginx_controller.min 0'),
			call('kube_system_aws_node.label kube-system/aws-node', '(1)'),
			call('kube_system_aws_node.colour COLOUR3'),
			call('kube_system_aws_node.draw AREASTACK'),
			call('kube_system_aws_node.min 0'),
			call('kube_system_cluster_autoscaler.label kube-system/cluster-autoscaler', '(1)'),
			call('kube_system_cluster_autoscaler.colour COLOUR4'),
			call('kube_system_cluster_autoscaler.draw AREASTACK'),
			call('kube_system_cluster_autoscaler.min 0'),
			call('kube_system_coredns.label kube-system/coredns', '(1)'),
			call('kube_system_coredns.colour COLOUR5'),
			call('kube_system_coredns.draw AREASTACK'),
			call('kube_system_coredns.min 0'),
			call('kube_system_kube_proxy.label kube-system/kube-proxy', '(1)'),
			call('kube_system_kube_proxy.colour COLOUR6'),
			call('kube_system_kube_proxy.draw AREASTACK'),
			call('kube_system_kube_proxy.min 0'),
			call('kube_system_metrics_server.label kube-system/metrics-server', '(1)'),
			call('kube_system_metrics_server.colour COLOUR7'),
			call('kube_system_metrics_server.draw AREASTACK'),
			call('kube_system_metrics_server.min 0'),
			call('mon_k8s.label mon/k8s', '(1)'),
			call('mon_k8s.colour COLOUR8'),
			call('mon_k8s.draw AREASTACK'),
			call('mon_k8s.min 0'),
			call('mon_munin_0.label mon/munin-0', '(1)'),
			call('mon_munin_0.colour COLOUR9'),
			call('mon_munin_0.draw AREASTACK'),
			call('mon_munin_0.min 0'),
			call('mon_munin_node.label mon/munin-node', '(1)'),
			call('mon_munin_node.colour COLOUR10'),
			call('mon_munin_node.draw AREASTACK'),
			call('mon_munin_node.min 0'),
			call('ztotal.label total', '(11)'),
			call('ztotal.colour 000000'),
			call('ztotal.draw LINE1'),
			call('ztotal.min 0'),
			call('multigraph pod_top_cpu.cert_manager_cert_manager_cpu'),
			call('graph_title k8stest cert-manager/cert-manager pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.cert_manager_cert_manager_cainjector_cpu'),
			call('graph_title k8stest cert-manager/cert-manager-cainjector pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.ingress_nginx_ingress_nginx_controller_cpu'),
			call('graph_title k8stest ingress-nginx/ingress-nginx-controller pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.kube_system_aws_node_cpu'),
			call('graph_title k8stest kube-system/aws-node pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.kube_system_cluster_autoscaler_cpu'),
			call('graph_title k8stest kube-system/cluster-autoscaler pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.kube_system_coredns_cpu'),
			call('graph_title k8stest kube-system/coredns pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.kube_system_kube_proxy_cpu'),
			call('graph_title k8stest kube-system/kube-proxy pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.kube_system_metrics_server_cpu'),
			call('graph_title k8stest kube-system/metrics-server pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.mon_k8s_cpu'),
			call('graph_title k8stest mon/k8s pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.mon_munin_0_cpu'),
			call('graph_title k8stest mon/munin-0 pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_cpu.mon_munin_node_cpu'),
			call('graph_title k8stest mon/munin-node pods CPU'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel millicores'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem'),
			call('graph_title k8stest pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('cert_manager_cert_manager.label cert-manager/cert-manager', '(1)'),
			call('cert_manager_cert_manager.colour COLOUR0'),
			call('cert_manager_cert_manager.draw AREASTACK'),
			call('cert_manager_cert_manager.min 0'),
			call('cert_manager_cert_manager_cainjector.label cert-manager/cert-manager-cainjector', '(1)'),
			call('cert_manager_cert_manager_cainjector.colour COLOUR1'),
			call('cert_manager_cert_manager_cainjector.draw AREASTACK'),
			call('cert_manager_cert_manager_cainjector.min 0'),
			call('ingress_nginx_ingress_nginx_controller.label ingress-nginx/ingress-nginx-controller', '(1)'),
			call('ingress_nginx_ingress_nginx_controller.colour COLOUR2'),
			call('ingress_nginx_ingress_nginx_controller.draw AREASTACK'),
			call('ingress_nginx_ingress_nginx_controller.min 0'),
			call('kube_system_aws_node.label kube-system/aws-node', '(1)'),
			call('kube_system_aws_node.colour COLOUR3'),
			call('kube_system_aws_node.draw AREASTACK'),
			call('kube_system_aws_node.min 0'),
			call('kube_system_cluster_autoscaler.label kube-system/cluster-autoscaler', '(1)'),
			call('kube_system_cluster_autoscaler.colour COLOUR4'),
			call('kube_system_cluster_autoscaler.draw AREASTACK'),
			call('kube_system_cluster_autoscaler.min 0'),
			call('kube_system_coredns.label kube-system/coredns', '(1)'),
			call('kube_system_coredns.colour COLOUR5'),
			call('kube_system_coredns.draw AREASTACK'),
			call('kube_system_coredns.min 0'),
			call('kube_system_kube_proxy.label kube-system/kube-proxy', '(1)'),
			call('kube_system_kube_proxy.colour COLOUR6'),
			call('kube_system_kube_proxy.draw AREASTACK'),
			call('kube_system_kube_proxy.min 0'),
			call('kube_system_metrics_server.label kube-system/metrics-server', '(1)'),
			call('kube_system_metrics_server.colour COLOUR7'),
			call('kube_system_metrics_server.draw AREASTACK'),
			call('kube_system_metrics_server.min 0'),
			call('mon_k8s.label mon/k8s', '(1)'),
			call('mon_k8s.colour COLOUR8'),
			call('mon_k8s.draw AREASTACK'),
			call('mon_k8s.min 0'),
			call('mon_munin_0.label mon/munin-0', '(1)'),
			call('mon_munin_0.colour COLOUR9'),
			call('mon_munin_0.draw AREASTACK'),
			call('mon_munin_0.min 0'),
			call('mon_munin_node.label mon/munin-node', '(1)'),
			call('mon_munin_node.colour COLOUR10'),
			call('mon_munin_node.draw AREASTACK'),
			call('mon_munin_node.min 0'),
			call('ztotal.label total', '(11)'),
			call('ztotal.colour 000000'),
			call('ztotal.draw LINE1'),
			call('ztotal.min 0'),
			call('multigraph pod_top_mem.cert_manager_cert_manager_mem'),
			call('graph_title k8stest cert-manager/cert-manager pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.cert_manager_cert_manager_cainjector_mem'),
			call('graph_title k8stest cert-manager/cert-manager-cainjector pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.ingress_nginx_ingress_nginx_controller_mem'),
			call('graph_title k8stest ingress-nginx/ingress-nginx-controller pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.kube_system_aws_node_mem'),
			call('graph_title k8stest kube-system/aws-node pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.kube_system_cluster_autoscaler_mem'),
			call('graph_title k8stest kube-system/cluster-autoscaler pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.kube_system_coredns_mem'),
			call('graph_title k8stest kube-system/coredns pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.kube_system_kube_proxy_mem'),
			call('graph_title k8stest kube-system/kube-proxy pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.kube_system_metrics_server_mem'),
			call('graph_title k8stest kube-system/metrics-server pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.mon_k8s_mem'),
			call('graph_title k8stest mon/k8s pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.mon_munin_0_mem'),
			call('graph_title k8stest mon/munin-0 pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
			call('multigraph pod_top_mem.mon_munin_node_mem'),
			call('graph_title k8stest mon/munin-node pods memory'),
			call('graph_args --base 1000 -l 0'),
			call('graph_category top'),
			call('graph_vlabel MiB'),
			call('graph_scale yes'),
			call('f1_avg.label average'),
			call('f1_avg.colour COLOUR1'),
			call('f1_avg.draw LINE1'),
			call('f1_avg.min 0'),
			call('f2_min.label min'),
			call('f2_min.colour COLOUR2'),
			call('f2_min.draw LINE1'),
			call('f2_min.min 0'),
			call('f3_max.label max'),
			call('f3_max.colour COLOUR3'),
			call('f3_max.draw LINE1'),
			call('f3_max.min 0'),
		]
		pods_top._print.assert_has_calls(config)
		t.assertEqual(pods_top._print.call_count, len(config))

	def test_report(t):
		x = dict()
		x.update(_sts)
		x['test'] = dict()
		pods_top.report(x)
		report = [
			call('multigraph pod_top_cpu'),
			call('cert_manager_cert_manager.value', 1),
			call('cert_manager_cert_manager_cainjector.value', 3),
			call('ingress_nginx_ingress_nginx_controller.value', 3),
			call('kube_system_aws_node.value', 4),
			call('kube_system_cluster_autoscaler.value', 2),
			call('kube_system_coredns.value', 5),
			call('kube_system_kube_proxy.value', 1),
			call('kube_system_metrics_server.value', 4),
			call('mon_k8s.value', 1),
			call('mon_munin_0.value', 4),
			call('mon_munin_node.value', 1),
			call('test.value', 'U'),
			call('ztotal.value', 29),
			call('multigraph pod_top_cpu.cert_manager_cert_manager_cpu'),
			call('f1_avg.value', 1.0),
			call('f2_min.value', 1),
			call('f3_max.value', 1),
			call('multigraph pod_top_cpu.cert_manager_cert_manager_cainjector_cpu'),
			call('f1_avg.value', 3.0),
			call('f2_min.value', 3),
			call('f3_max.value', 3),
			call('multigraph pod_top_cpu.ingress_nginx_ingress_nginx_controller_cpu'),
			call('f1_avg.value', 3.0),
			call('f2_min.value', 3),
			call('f3_max.value', 3),
			call('multigraph pod_top_cpu.kube_system_aws_node_cpu'),
			call('f1_avg.value', 4.0),
			call('f2_min.value', 4),
			call('f3_max.value', 4),
			call('multigraph pod_top_cpu.kube_system_cluster_autoscaler_cpu'),
			call('f1_avg.value', 2.0),
			call('f2_min.value', 2),
			call('f3_max.value', 2),
			call('multigraph pod_top_cpu.kube_system_coredns_cpu'),
			call('f1_avg.value', 5.0),
			call('f2_min.value', 5),
			call('f3_max.value', 5),
			call('multigraph pod_top_cpu.kube_system_kube_proxy_cpu'),
			call('f1_avg.value', 1.0),
			call('f2_min.value', 1),
			call('f3_max.value', 1),
			call('multigraph pod_top_cpu.kube_system_metrics_server_cpu'),
			call('f1_avg.value', 4.0),
			call('f2_min.value', 4),
			call('f3_max.value', 4),
			call('multigraph pod_top_cpu.mon_k8s_cpu'),
			call('f1_avg.value', 1.0),
			call('f2_min.value', 1),
			call('f3_max.value', 1),
			call('multigraph pod_top_cpu.mon_munin_0_cpu'),
			call('f1_avg.value', 4.0),
			call('f2_min.value', 4),
			call('f3_max.value', 4),
			call('multigraph pod_top_cpu.mon_munin_node_cpu'),
			call('f1_avg.value', 1.0),
			call('f2_min.value', 1),
			call('f3_max.value', 1),
			call('multigraph pod_top_cpu.test_cpu'),
			call('f1_avg.value', 'U'),
			call('f2_min.value', 'U'),
			call('f3_max.value', 'U'),
			call('multigraph pod_top_mem'),
			call('cert_manager_cert_manager.value', 24),
			call('cert_manager_cert_manager_cainjector.value', 52),
			call('ingress_nginx_ingress_nginx_controller.value', 76),
			call('kube_system_aws_node.value', 41),
			call('kube_system_cluster_autoscaler.value', 41),
			call('kube_system_coredns.value', 8),
			call('kube_system_kube_proxy.value', 14),
			call('kube_system_metrics_server.value', 20),
			call('mon_k8s.value', 7),
			call('mon_munin_0.value', 66),
			call('mon_munin_node.value', 12),
			call('test.value', 'U'),
			call('ztotal.value', 361),
			call('multigraph pod_top_mem.cert_manager_cert_manager_mem'),
			call('f1_avg.value', 24.0),
			call('f2_min.value', 24),
			call('f3_max.value', 24),
			call('multigraph pod_top_mem.cert_manager_cert_manager_cainjector_mem'),
			call('f1_avg.value', 52.0),
			call('f2_min.value', 52),
			call('f3_max.value', 52),
			call('multigraph pod_top_mem.ingress_nginx_ingress_nginx_controller_mem'),
			call('f1_avg.value', 76.0),
			call('f2_min.value', 76),
			call('f3_max.value', 76),
			call('multigraph pod_top_mem.kube_system_aws_node_mem'),
			call('f1_avg.value', 41.0),
			call('f2_min.value', 41),
			call('f3_max.value', 41),
			call('multigraph pod_top_mem.kube_system_cluster_autoscaler_mem'),
			call('f1_avg.value', 41.0),
			call('f2_min.value', 41),
			call('f3_max.value', 41),
			call('multigraph pod_top_mem.kube_system_coredns_mem'),
			call('f1_avg.value', 8.0),
			call('f2_min.value', 8),
			call('f3_max.value', 8),
			call('multigraph pod_top_mem.kube_system_kube_proxy_mem'),
			call('f1_avg.value', 14.0),
			call('f2_min.value', 14),
			call('f3_max.value', 14),
			call('multigraph pod_top_mem.kube_system_metrics_server_mem'),
			call('f1_avg.value', 20.0),
			call('f2_min.value', 20),
			call('f3_max.value', 20),
			call('multigraph pod_top_mem.mon_k8s_mem'),
			call('f1_avg.value', 7.0),
			call('f2_min.value', 7),
			call('f3_max.value', 7),
			call('multigraph pod_top_mem.mon_munin_0_mem'),
			call('f1_avg.value', 66.0),
			call('f2_min.value', 66),
			call('f3_max.value', 66),
			call('multigraph pod_top_mem.mon_munin_node_mem'),
			call('f1_avg.value', 12.0),
			call('f2_min.value', 12),
			call('f3_max.value', 12),
			call('multigraph pod_top_mem.test_mem'),
			call('f1_avg.value', 'U'),
			call('f2_min.value', 'U'),
			call('f3_max.value', 'U'),
		]
		pods_top._print.assert_has_calls(report)
		t.assertEqual(pods_top._print.call_count, len(report))

if __name__ == '__main__':
	unittest.main()
