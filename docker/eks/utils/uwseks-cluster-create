#!/usr/bin/env python3

import os.path
import subprocess
import sys

from argparse import ArgumentParser

def main():
	parser = ArgumentParser()
	parser.add_argument('--profile', help = 'aws credentials profile', default = 'default')
	parser.add_argument('--region', help = 'aws region')
	parser.add_argument('--zones', help = 'aws region zones')
	parser.add_argument('--nodes', help = 'desired number of nodes',
		type = int, default = 2)
	parser.add_argument('--nodes-min', help = 'min number of nodes',
		type = int, default = 2)
	parser.add_argument('--nodes-max', help = 'max number of nodes',
		type = int, default = 2)
	parser.add_argument('--instance-types', help = 'instance types', default = 't2.small')
	parser.add_argument('--no-setup', help = 'do not run cluster setup', action = 'store_true')
	parser.add_argument('--fargate', help = 'setup fargate nodes', action = 'store_true')
	parser.add_argument('-v', help = 'verbose level', default = '3')
	parser.add_argument('name', help = 'cluster name')
	args = parser.parse_args()
	cmd = _createCluster(args)
	print(cmd)
	try:
		subprocess.run(cmd, shell = True, check = True)
	except Exception:
		return 1
	if not args.no_setup:
		cmd = 'uwseks-cluster-setup %s' % args.name
		print(cmd)
		try:
			subprocess.run(cmd, shell = True, check = True)
		except Exception:
			return 2
	return 0

def _createCluster(args):
	cmd = 'eksctl -v %s create cluster --name %s' % (args.v, args.name)
	cmd += ' --profile %s' % args.profile
	if args.region is not None:
		cmd += ' --region %s' % args.region
	if args.zones is not None:
		cmd += ' --zones %s' % args.zones
	cmd += ' --tags uwseks=%s' % args.name
	cmd += ' --version 1.19'
	if args.fargate:
		cmd += ' --fargate'
	else:
		cmd += ' --managed'
		cmd += ' --nodegroup-name main'
		cmd += ' --nodes %d' % args.nodes
		cmd += ' --nodes-min %d' % args.nodes_min
		cmd += ' --nodes-max %d' % args.nodes_max
		cmd += ' --instance-types %s' % args.instance_types
		cmd += ' --asg-access'
	cmd += ' --ssh-access'
	cmd += ' --ssh-public-key %s' % os.path.expanduser('~/files/ssh/node.pub')
	cmd += ' --full-ecr-access'
	cmd += ' --auto-kubeconfig'
	return cmd

if __name__ == '__main__':
	sys.exit(main())
